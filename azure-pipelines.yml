# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: 'vNext$(rev:.r)' # Format for build number (will be overridden)

#trigger:
#- master

# DevOps Setup: Define the following pipeline level variables in Azure DevOps build pipeline
#
# ArtifactFeedID: (Optional - set to your Azure DevOps Artifact (NuGet) feed. If not provided, publish job will be skipped.)
# BuildConfiguration: 'Release'
# BuildPlatform: 'Any CPU'
# RunTests: 'true' (Optional - set to 'false' to disable test jobs - useful for debugging. If not provided, tests will be run.)
# RunX86Tests: 'false' (Optional - set to 'true' to enable x86 tests)
#
# PackageVersion: '' (Optional. Will be generated from nbgv if not provided. The version of the NuGet package.)
# AssemblyVersion: '' (Optional. Will be generated from nbgv if not provided. The assembly version (affects binary compatibility). This should always be the same as the previous version unless a binary breaking change happens (i.e. porting a new version).)
# FileVersion: '' (Optional. Will be generated from nbgv if not provided. The version that is visible on the assembly file.)
# InformationalVersion: '' (Optional. Will be generated from nbgv if not provided. If provided, the git commit hash will be appended to the end of the value.)

variables:
- name: TestTargetFrameworks
  value: 'net6.0;net5.0;netcoreapp3.1;net40;net35'
- name: BuildSDKVersion
  value: '6.0.101'
- name: BinaryArtifactName
  value: 'testbinaries'
- name: NuGetArtifactName
  value: 'nuget'
- name: TestResultsArtifactName
  value: 'testresults'
- name: VersionArtifactName
  value: 'version'
- name: BuildNumberFileName
  value: 'buildNumber.txt'
- name: PackageVersionFileName
  value: 'packageVersion.txt'
- name: FileVersionFileName
  value: 'fileVersion.txt'

stages:
- stage: Build_Stage
  displayName: 'Build Stage:'
  jobs:

  - job: Build
    pool:
      vmImage: 'windows-2019'

    steps:
    - pwsh: |
        $configuration = if ($env:BUILDCONFIGURATION) { $env:BUILDCONFIGURATION } else { "Release" }
        Write-Host "##vso[task.setvariable variable=BuildConfiguration;]$configuration"
        $platform = if ($env:BUILDPLATFORM) { $env:BUILDPLATFORM } else { "Any CPU" }
        Write-Host "##vso[task.setvariable variable=BuildPlatform;]$platform"
        $informationalVersion = if ($env:INFORMATIONALVERSION) { $env:INFORMATIONALVERSION } else { '' }
        Write-Host "##vso[task.setvariable variable=InformationalVersion;]$informationalVersion"
        $fileVersion = if ($env:FILEVERSION) { $env:FILEVERSION } else { '' }
        Write-Host "##vso[task.setvariable variable=FileVersion;]$fileVersion"
        $assemblyVersion = if ($env:ASSEMBLYVERSION) { $env:ASSEMBLYVERSION } else { '' }
        Write-Host "##vso[task.setvariable variable=AssemblyVersion;]$assemblyVersion"
        $packageVersion = if ($env:PACKAGEVERSION) { $env:PACKAGEVERSION } else { '' }
        Write-Host "##vso[task.setvariable variable=PackageVersion;]$packageVersion"
      displayName: 'Setup Default Variable Values'

    - task: UseDotNet@2
      displayName: 'Use .NET sdk $(BuildSDKVersion)'
      inputs:
        packageType: 'sdk'
        version: '$(BuildSDKVersion)'

    # Fix errors with not being able to locate SDK: https://developercommunity.visualstudio.com/t/nuget-restore-fails-because-net-core-sdk-cannot-be/598541
    - pwsh: dotnet new globaljson --sdk-version '$(BuildSDKVersion)'

    #- template: 'show-all-files.yml' # Uncomment for debugging
    #- template: 'show-all-environment-variables.yml' # Uncomment for debugging

    - template: 'build/azure-templates/gitversioning-increment-and-persist-versions.yml'
      parameters:
        informationalVersion: '$(InformationalVersion)' # Input passed in from pipeline
        fileVersion: '$(FileVersion)' # Input passed in from pipeline
        assemblyVersion: '$(AssemblyVersion)' # Input passed in from pipeline
        packageVersion: '$(PackageVersion)' # Input passed in from pipeline
        versionArtifactName: '$(VersionArtifactName)'
        packageVersionFileName: '$(PackageVersionFileName)'
        fileVersionFileName: '$(FileVersionFileName)'
        buildNumberFileName: '$(BuildNumberFileName)'

    - template: 'build/azure-templates/build-pack-and-publish-libraries.yml'
      parameters:
        artifactFeedID: '$(ArtifactFeedID)'
        testTargetFrameworks: '$(TestTargetFrameworks)'
        informationalVersion: '$(CI_InformationalVersion)' # Output from gitversioning-increment-and-persist-versions.yml
        fileVersion: '$(CI_FileVersion)' # Output from gitversioning-increment-and-persist-versions.yml
        assemblyVersion: '$(CI_AssemblyVersion)' # Output from gitversioning-increment-and-persist-versions.yml
        packageVersion: '$(CI_PackageVersion)' # Output from gitversioning-increment-and-persist-versions.yml
        buildConfiguration: '$(BuildConfiguration)'
        buildPlatform: '$(BuildPlatform)'
        nugetArtifactName: '$(NuGetArtifactName)'
        binaryArtifactName: '$(BinaryArtifactName)'


- stage: Test_Stage
  displayName: 'Test Stage:'
  jobs:

  - job: Test_net6_0_x64
    condition: and(succeeded(), ne(variables['RunTests'], 'false'))
    strategy:
      matrix:
        Windows:
          osName: 'Windows'
          imageName: 'windows-2019'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
        Linux:
          osName: 'Linux'
          imageName: 'ubuntu-latest'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
        macOS:
          osName: 'macOS'
          imageName: 'macOS-latest'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
    displayName: 'Test net6.0,x64 on'
    pool:
      vmImage: $(imageName)
    steps:
    - template: 'build/azure-templates/run-tests-on-os.yml'
      parameters:
        osName: $(osName)
        testTargetFrameworks: 'net6.0'
        vsTestPlatform: 'x64'
        testResultsArtifactName: '$(TestResultsArtifactName)'
        maximumAllowedFailures: $(maximumAllowedFailures)

  - job: Test_net6_0_x86 # Only run if explicitly enabled with RunX86Tests
    condition: and(succeeded(), ne(variables['RunTests'], 'false'), eq(variables['RunX86Tests'], 'true'))
    strategy:
      matrix:
        Windows:
          osName: 'Windows'
          imageName: 'windows-2019'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
        Linux:
          osName: 'Linux'
          imageName: 'ubuntu-latest'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
        macOS:
          osName: 'macOS'
          imageName: 'macOS-latest'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
    displayName: 'Test net6.0,x86 on'
    pool:
      vmImage: $(imageName)
    steps:
    - template: 'build/azure-templates/run-tests-on-os.yml'
      parameters:
        osName: $(osName)
        testTargetFrameworks: 'net6.0'
        vsTestPlatform: 'x86'
        testResultsArtifactName: '$(TestResultsArtifactName)'
        maximumAllowedFailures: $(maximumAllowedFailures)

  - job: Test_net5_0_x64
    condition: and(succeeded(), ne(variables['RunTests'], 'false'))
    strategy:
      matrix:
        Windows:
          osName: 'Windows'
          imageName: 'windows-2019'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
        Linux:
          osName: 'Linux'
          imageName: 'ubuntu-latest'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
        macOS:
          osName: 'macOS'
          imageName: 'macOS-latest'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
    displayName: 'Test net5.0,x64 on'
    pool:
      vmImage: $(imageName)
    steps:
    - template: 'build/azure-templates/run-tests-on-os.yml'
      parameters:
        osName: $(osName)
        testTargetFrameworks: 'net5.0'
        vsTestPlatform: 'x64'
        testResultsArtifactName: '$(TestResultsArtifactName)'
        maximumAllowedFailures: $(maximumAllowedFailures)

  - job: Test_net5_0_x86 # Only run if explicitly enabled with RunX86Tests
    condition: and(succeeded(), ne(variables['RunTests'], 'false'), eq(variables['RunX86Tests'], 'true'))
    strategy:
      matrix:
        Windows:
          osName: 'Windows'
          imageName: 'windows-2019'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
        Linux:
          osName: 'Linux'
          imageName: 'ubuntu-latest'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
        macOS:
          osName: 'macOS'
          imageName: 'macOS-latest'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
    displayName: 'Test net5.0,x86 on'
    pool:
      vmImage: $(imageName)
    steps:
    - template: 'build/azure-templates/run-tests-on-os.yml'
      parameters:
        osName: $(osName)
        testTargetFrameworks: 'net5.0'
        vsTestPlatform: 'x86'
        testResultsArtifactName: '$(TestResultsArtifactName)'
        maximumAllowedFailures: $(maximumAllowedFailures)

  - job: Test_netcoreapp3_1_x64
    condition: and(succeeded(), ne(variables['RunTests'], 'false'))
    strategy:
      matrix:
        Windows:
          osName: 'Windows'
          imageName: 'windows-2019'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
        Linux:
          osName: 'Linux'
          imageName: 'ubuntu-latest'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
        macOS:
          osName: 'macOS'
          imageName: 'macOS-latest'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
    displayName: 'Test netcoreapp3.1,x64 on'
    pool:
      vmImage: $(imageName)
    steps:
    - template: 'build/azure-templates/run-tests-on-os.yml'
      parameters:
        osName: $(osName)
        testTargetFrameworks: 'netcoreapp3.1'
        vsTestPlatform: 'x64'
        testResultsArtifactName: '$(TestResultsArtifactName)'
        maximumAllowedFailures: $(maximumAllowedFailures)

  - job: Test_netcoreapp3_1_x86 # Only run if explicitly enabled with RunX86Tests
    condition: and(succeeded(), ne(variables['RunTests'], 'false'), eq(variables['RunX86Tests'], 'true'))
    strategy:
      matrix:
        Windows:
          osName: 'Windows'
          imageName: 'windows-2019'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
        Linux:
          osName: 'Linux'
          imageName: 'ubuntu-latest'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
        macOS:
          osName: 'macOS'
          imageName: 'macOS-latest'
          maximumAllowedFailures: 0 # Maximum allowed failures for a successful build
    displayName: 'Test netcoreapp3.1,x86 on'
    pool:
      vmImage: $(imageName)
    steps:
    - template: 'build/azure-templates/run-tests-on-os.yml'
      parameters:
        osName: $(osName)
        testTargetFrameworks: 'netcoreapp3.1'
        vsTestPlatform: 'x86'
        testResultsArtifactName: '$(TestResultsArtifactName)'
        maximumAllowedFailures: $(maximumAllowedFailures)

  - job: Test_net40_x64
    condition: and(succeeded(), ne(variables['RunTests'], 'false'))
    displayName: 'Test net40,x64 on Windows'
    pool:
      vmImage: 'windows-2019'
    steps:
    - template: 'build/azure-templates/run-tests-on-os.yml'
      parameters:
        osName: 'Windows'
        testTargetFrameworks: 'net40'
        vsTestPlatform: 'x64'
        testResultsArtifactName: '$(TestResultsArtifactName)'
        maximumAllowedFailures: 0 # Maximum allowed failures for a successful build

  - job: Test_net40_x86 # Only run if explicitly enabled with RunX86Tests
    condition: and(succeeded(), ne(variables['RunTests'], 'false'), eq(variables['RunX86Tests'], 'true'))
    displayName: 'Test net40,x86 on Windows'
    pool:
      vmImage: 'windows-2019'
    steps:
    - template: 'build/azure-templates/run-tests-on-os.yml'
      parameters:
        osName: 'Windows'
        testTargetFrameworks: 'net40'
        vsTestPlatform: 'x86'
        testResultsArtifactName: '$(TestResultsArtifactName)'
        maximumAllowedFailures: 0 # Maximum allowed failures for a successful build

  - job: Test_net35_x64
    condition: and(succeeded(), ne(variables['RunTests'], 'false'))
    displayName: 'Test net35,x64 on Windows'
    pool:
      vmImage: 'windows-2019'
    steps:
    - template: 'build/azure-templates/run-tests-on-os.yml'
      parameters:
        osName: 'Windows'
        testTargetFrameworks: 'net35'
        vsTestPlatform: 'x64'
        testResultsArtifactName: '$(TestResultsArtifactName)'
        maximumAllowedFailures: 0 # Maximum allowed failures for a successful build

  - job: Test_net35_x86 # Only run if explicitly enabled with RunX86Tests
    condition: and(succeeded(), ne(variables['RunTests'], 'false'), eq(variables['RunX86Tests'], 'true'))
    displayName: 'Test net35,x86 on Windows'
    pool:
      vmImage: 'windows-2019'
    steps:
    - template: 'build/azure-templates/run-tests-on-os.yml'
      parameters:
        osName: 'Windows'
        testTargetFrameworks: 'net35'
        vsTestPlatform: 'x86'
        testResultsArtifactName: '$(TestResultsArtifactName)'
        maximumAllowedFailures: 0 # Maximum allowed failures for a successful build

- stage: Publish_Stage
  displayName: 'Publish Stage:'
  jobs:
  - job: Publish
    condition: and(succeeded(), ne(variables['ArtifactFeedID'], ''))
    pool:
      vmImage: 'windows-2019'

    steps:
    - template: 'build/azure-templates/show-all-environment-variables.yml'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts: $(VersionArtifactName)'
      inputs:
        artifactName: '$(VersionArtifactName)'
        downloadPath: '$(Build.ArtifactStagingDirectory)'

      # NOTE: We are setting Build.BuildNumber here to the NuGet package version to work around the limitation that
      # the version cannot be passed to the Index Sources & Publish Symbols task.
    - pwsh: |
        $version = Get-Content '$(Build.ArtifactStagingDirectory)/$(VersionArtifactName)/$(PackageVersionFileName)' -Raw
        Write-Host "##vso[task.setvariable variable=PackageVersion;]$version"
        Write-Host "##vso[build.updatebuildnumber]$version"
      displayName: 'Read PackageVersion from File to Build.BuildNumber'

    - template: 'build/azure-templates/show-all-environment-variables.yml'

    - template: 'build/azure-templates/publish-nuget-packages.yml'
      parameters:
        artifactFeedID: '$(ArtifactFeedID)'
        nugetArtifactName: '$(NuGetArtifactName)'